class Solution:
    direction=[[-1,0],[0,-1],[0,1],[1,0]]
    def largestIsland(self, grid) -> int:
        def dfs(grid,i,j,index):
            res=1
            grid[i][j]=index
            for d in self.direction:
                x=i+d[0]
                y=j+d[1]
                if x>-1 and x<len(grid) and y>-1 and y<len(grid[0]) and grid[x][y]==1:
                    res+=dfs(grid,x,y,index)
            return res

        memo=dict()
        index=2
        res=0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==1:
                    memo[index]=dfs(grid,i,j,index)
                    res=max(res,memo[index])
                    index+=1

        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==0:
                    plus=set()
                    for d in self.direction:
                        x=i+d[0]
                        y=j+d[1]
                        if x > -1 and x < len(grid) and y > -1 and y < len(grid[0]) and grid[x][y]>0:
                            plus.add(grid[x][y])

                    temp=1
                    for p in plus:
                        temp+=memo[p]
                    res=max(res,temp)
        return res
    #     dp=[[-1 for i in grid[0]] for i in grid ]
    #     connect=set()
    #     res=0
    #     for i in range(len(grid)):
    #         for j in range(len(grid[0])):
    #             if dp[i][j]>0:
    #                 continue
    #             else:
    #                 if grid[i][j]==1:
    #                     self.helper(grid,i,j,dp,connect)
    #                     res=max(res,dp[i][j])
    #                 else:
    #                     count=1
    #                     visited=list()
    #                     for d in self.direction:
    #                         x=i+d[0]
    #                         y=j+d[1]
    #                         if x > -1 and x < len(grid) and y > -1 and y < len(grid[0]) and grid[x][y] == 1:
    #                             if dp[x][y]<0:
    #                                 self.helper(grid,x,y,dp,connect)
    #                             add = dp[x][y]
    #                             for v in visited:
    #                                 if v+str(x)+str(y) in connect or str(x)+str(y)+v in connect:
    #                                     add=0
    #                                     break
    #                             count+=add
    #                         visited.append(str(x)+str(y))
    #                     dp[i][j]=count
    #                     res=max(res,count)
    #     return res
    #
    # def helper(self,grid,i,j,dp,connect):
    #     q=[[i,j]]
    #     visited=set()
    #     visited.add(str(i)+str(j))
    #     last=1
    #     while last>0:
    #         count=0
    #         r=q[-last:]
    #         for i in range(last):
    #             c=r[i]
    #
    #             for d in self.direction:
    #                 x=c[0]+d[0]
    #                 y=c[1]+d[1]
    #                 if x > -1 and x < len(grid) and y > -1 and y < len(grid[0]) and grid[x][y] == 1 and str(x)+str(y) not in visited:
    #                         q.append([x,y])
    #                         visited.add(str(x)+str(y))
    #                         count+=1
    #
    #         last=count
    #
    #     for i in q:
    #         dp[i[0]][i[1]]=len(q)
    #         for j in q:
    #             connect.add(str(i[0])+str(i[1])+str(j[0])+str(j[1]))
    #     return

if __name__ == '__main__':
    sol=Solution()
    # grid = [[1, 1], [1, 1]]
    # grid = [[1, 0], [0, 1]]
    # grid = [[1, 1], [1, 0]]
    # grid=[[1,0,0,1,1],\
    #      [1,0,0,1,0],\
    #       [1,1,1,1,1],\
    #       [1,1,1,0,1],\
    #       [0,0,0,1,0]]
    grid=[[1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1,
      0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0],
     [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0,
      0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0],
     [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
     [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1,
      0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
     [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1,
      1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0],
     [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,
      1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1],
     [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1,
      1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
     [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0,
      1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0],
     [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1,
      0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1],
     [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1,
      1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0],
     [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0,
      1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1],
     [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0,
      0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
     [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0,
      1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
     [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,
      0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1],
     [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0,
      1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0],
     [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0,
      1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0],
     [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1,
      0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0],
     [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1,
      1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1],
     [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1],
     [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1,
      0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0],
     [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1,
      1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0],
     [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
     [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1,
      1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0],
     [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0,
      0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1],
     [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,
      0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0],
     [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
      0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1],
     [1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0,
      0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1],
     [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
      1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1],
     [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1,
      1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1],
     [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0,
      1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1],
     [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0,
      1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1],
     [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1,
      1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0],
     [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1,
      1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
     [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1,
      0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1],
     [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1,
      0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1],
     [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0,
      1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1],
     [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0,
      0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],
     [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1,
      0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1],
     [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1,
      1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0],
     [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0,
      1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0],
     [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1,
      1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1],
     [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1,
      1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0],
     [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,
      0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1],
     [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1,
      1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
     [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1,
      0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1],
     [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,
      0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],
     [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1,
      0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0],
     [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0,
      1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0],
     [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0,
      1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1],
     [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1,
      0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1]]
    print(sol.largestIsland(grid))

